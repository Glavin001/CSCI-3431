#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>

#define SHMSIZE 1024
key_t key = 1953;
int shmid, count = 0;
int *shm;

sem_t   first,
        second;

void calculate(int process, int num);

int main(int argc, char **argv)
{
    int number,i;
    pid_t pid;
    //0 = lock , 1 = unlock
    sem_init(&first,0,1);
    sem_init(&second,0,0);

    if(argc != 2)
    {
        fprintf(stderr,"Not enough command line arguments\n");
        exit(EXIT_FAILURE);
    }

    number = atoi(argv[1]);

    /* 1. GET a shared memory section */
    if ((shmid = shmget(key, SHMSIZE, IPC_CREAT | 0600)) < 0)
    {
        fprintf(stderr, "Error\n");
        exit(EXIT_FAILURE);
    }

    /* 2. ATTACH it to the process */
    if ((shm = shmat(shmid, NULL, 0)) == (int *) -1)
    {
        fprintf(stderr,"Error\n");
        exit(EXIT_FAILURE);
    }

    shm[0] = 1;
    shm[1] = 1;

    //Create 2 children
    for (i = 1; i <= 2; i++)
    {
        if((pid = fork()) == -1)
        {
            fprintf(stderr, "Error\n");
            exit(EXIT_FAILURE);
        }
        if(pid == 0)
        {
            calculate(i, number);    
        }
    } 
        exit(EXIT_SUCCESS);
}

void calculate(int process, int num)
{
    int i;
    for(i = 1; i <= num; i++)
    {
        //if(process == 1)
        //{
            sem_wait(&first);
            int temp = shm[0] + shm[1];
            shm[0] = shm[1];
            shm[1] = temp;
            printf("Process(%d) %d: fibonacci number is %d.\n", process, getpid(), temp);
            sem_post(&second);
        }
        //if(process == 2)
        //{
            sem_wait(&second);
            int temp = shm[0] + shm[1];
            shm[0] = shm[1];
            shm[1] = temp;
            printf("Process(%d) %d: fibonacci number is %d.\n", process, getpid(), temp);
            sem_post(&first);
       // }
    }
    exit(EXIT_SUCCESS);
}
